# Make sure Docker is installed
- hosts: all:!localhost
  gather_facts: false
  become: true
  roles:
    - docker

# Place a full etcd on the etcd hosts
- hosts: etcd
  become: true
  roles:
    - { role: etcd, proxy_etcd: False, tags: [ 'etcd' ] }

# Set the etcd values (if required) from the first etcd host
- hosts: etcd[0]
  become: true
  roles:
    - { role: populate_etcd, tags: [ 'etcd' ] }

# Place a proxy etcd everywhere except the etcd hosts
- hosts: all:!etcd:!localhost
  become: true
  roles:
    - { role: etcd, proxy_etcd: True, tags: [ 'etcd' ] }

# Place Prometheus on the Prometheus hosts
- hosts: prometheus
  become: true
  roles:
    - { role: prometheus, tags: [ 'prometheus' ] }
    - { role: discovery, parent: 'route_discovery', service: prometheus, port: "{{ports['prometheus']}}", service_properties: {private: true}, tags: [ 'prometheus' ] }
 
# Place Grafana as the frontend on the Prometheus hosts
- hosts: prometheus
  become: true
  roles:
    - { role: grafana, tags: [ 'grafana' ] }
    - { role: discovery, parent: 'route_discovery', service: grafana, port: "{{ports['grafana']}}", service_properties: {strip: true, private: true}, tags: [ 'grafana' ] }

# Place prometheus\node_exporter everywhere
- hosts: all:!localhost
  become: true
  roles:
    - { role: prometheus-node-exporter, tags: [ 'prometheus_node_exporter' ] }
        
- name: Remove old staging directory
  hosts: localhost
  tasks:
    - file:
        path: "{{controller_src_staging}}"
        state: absent
    
# Recreate localhost staging directory
- name: Create local staging directory
  hosts: localhost
  tasks:
    - file:
        state: directory
        path: "{{controller_src_staging}}"

# nginx
- hosts: frontend
  become: true
  roles:
    - { role: frontend, tags: [ 'frontend' ] }

# Default Backend nodejs process. Role can be applied additional times to different hosts with different configuration
- hosts: backend
  become: true
  roles:
    - { role: nodejs, identifier: backend, nodejs_port: "{{ports['backend']}}", tags: [ 'backend' ] }
    - { role: discovery, parent: 'route_discovery', service: backend, port: "{{ports['backend']}}", service_properties: {strip: false, private: false}, tags: [ 'backend' ] }

# Place a full RethinkDB on the RethinkDB hosts
- hosts: rethinkdb
  become: true
  roles:
    - { role: rethinkdb, proxy_rethinkdb: False }
    - { role: discovery, parent: 'route_discovery', service: backend, port: "{{ports['backend']}}", service_properties: {strip: false, private: false}, tags: [ 'backend' ] }

# Place a proxy RethinkDB alongside application instances (edit the hosts when there are various types)
- hosts: backend:!rethinkdb
  become: true
  roles:
    - { role: rethinkdb, proxy_rethinkdb: True }
    - { role: discovery, parent: 'route_discovery', service: rethinkdb, port: "{{ports['rethinkdb']}}", service_properties: {strip: true, private: true}, tags: [ 'rethinkdb' ] }
