# check on etcd
- hosts: all:!localhost
  become: true
  tasks:
  - name: Check if etcd and etcd proxy is running
    command: systemctl status etcd.service --lines=0
    ignore_errors: yes
    changed_when: false
    register: service_etcd_status
  - name: Report status of etcd
    debug:
      msg: "{{service_etcd_status.stdout.split('\n')}}"

# check on frontend services
- hosts: tag_frontend
  become: true
  tasks:
  - name: Check if nginx is running
    command: systemctl status nginx.service --lines=0
    ignore_errors: yes
    changed_when: false
    register: service_nginx_status
  - name: Report status of nginx
    debug:
      msg: "{{service_nginx_status.stdout.split('\n')}}"
  - name: Check if nginx-reload is running
    command: systemctl status nginx-reload.path --lines=0
    ignore_errors: yes
    changed_when: false
    register: service_nginx_reload_status
  - name: Report status of nginx-reload
    debug:
      msg: "{{service_nginx_reload_status.stdout.split('\n')}}"
  - name: Check if route-discovery-watcher is running
    command: systemctl status route-discovery-watcher.service --lines=0
    ignore_errors: yes
    changed_when: false
    register: service_route_discovery_watcher_status
  - name: Report status of nginx-reload
    debug:
      msg: "{{service_route_discovery_watcher_status.stdout.split('\n')}}"
  - name: Check if certificate-sync is running
    command: systemctl status certificate-sync.service --lines=0
    ignore_errors: yes
    changed_when: false
    register: service_certificate_sync_status
  - name: Report status of certificate-sync
    debug:
      msg: "{{service_certificate_sync_status.stdout.split('\n')}}"
  - name: Check if acme-response-watcher is running
    command: systemctl status acme-response-watcher.service --lines=0
    ignore_errors: yes
    changed_when: false
    register: service_acme_response_watcher_status
  - name: Report status of acme-response-watcher
    debug:
      msg: "{{service_acme_response_watcher_status.stdout.split('\n')}}"
  - name: Check if letsencrypt-renewal.timer is running
    command: systemctl status letsencrypt-renewal.timer
    ignore_errors: yes
    changed_when: false
    register: service_letsencrypt_renewal_status
  - name: Report status of letsencrypt-renewal.timer
    debug:
      msg: "{{service_letsencrypt_renewal_status.stdout.split('\n')}}"
      
# check on backend services
- hosts: tag_backend
  become: true
  tasks:
  - name: Check if nodejs is running
    command: systemctl status backend_nodejs.service --lines=0
    ignore_errors: yes
    changed_when: false
    register: service_backend_nodejs_status
  - name: Report status of nodejs
    debug:
      msg: "{{service_backend_nodejs_status.stdout.split('\n')}}"
  - name: Check if nodejs route-publishing is running
    command: systemctl status backend_route-publishing.service --lines=0
    ignore_errors: yes
    changed_when: false
    register: service_backend_route_publishing_status
  - name: Report status of nodejs route-publishing
    debug:
      msg: "{{service_backend_route_publishing_status.stdout.split('\n')}}"
